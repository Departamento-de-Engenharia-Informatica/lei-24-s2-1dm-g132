@startuml
skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false

title US024 - Postpone an entry in the agenda

autonumber

actor "GSM" as Employee
participant ":PostponeEntryUI" as UI
participant ":PostponeEntryController" as CTRL
participant ":ApplicationSession" as _APP
participant "appSession\n:ApplicationSession" as APP
participant "currentSession\n:UserSession" as SESSION
participant ":Repositories" as RepositorySingleton
participant "repositories\n:Repositories" as PLAT
participant "greenSpaceRepository\n:GreenSpaceRepository" as GreenSpaceRepository
participant "greenSpacesList\n:List<GreenSpace>" as greenSpacesList
participant "greenSpaceMapper\n:GreenSpaceMapper" as GreenSpaceMapper
participant "greenSpace\n:GreenSpace" as greenSpace
participant "GSMGreenSpacesList\n:List<GreenSpace>" as GSMGreenSpacesList
participant "GSMGreenSpacesListDto\n:List<GreenSpaceDto>" as GSMGreenSpacesListDto
participant "greenSpaceDTO\n:GreenSpaceDTO" as greenSpaceDTO
participant "agenda\n:Agenda" as Agenda
participant "GSTaskMapper\n:GSTaskMapper" as TaskMapper
participant "entriesList\n:List<GSTask>" as entriesList
participant "tasksListByGreenSpace\n:List<GSTask>" as tasksListByGreenSpace
participant "task\n:Task" as task
participant "tasksListByGreenSpaceDTO\n:List<GSTaskDTO>" as tasksListByGreenSpaceDTO
participant "GSTaskDTO\n:GSTaskDTO" as TaskDTO


activate Employee

    Employee -> UI : asks to postpone an entry in the agenda
    activate UI

    UI --> CTRL** : create()
            UI -> CTRL : getGreenSpaces()
            activate CTRL

                CTRL -> _APP: getInstance()
                    activate _APP
                        _APP -> CTRL: appSession
                    deactivate _APP

                    CTRL -> APP: getCurrentSession()
                    activate APP

                        APP --> CTRL: currentSession
                    deactivate APP

                    CTRL -> SESSION: email = getUserEmail()
                    activate SESSION

                        SESSION --> CTRL: email
                    deactivate SESSION

                CTRL -> RepositorySingleton : getInstance()
                    activate RepositorySingleton

                        RepositorySingleton --> CTRL: repositories
                    deactivate RepositorySingleton

                    CTRL -> PLAT : getGreenSpaceRepository()
                    activate PLAT

                        PLAT --> CTRL : greenSpaceRepository
                    deactivate PLAT

                    CTRL -> GreenSpaceRepository : getGreenSpaces(email)
                    activate GreenSpaceRepository

                        GreenSpaceRepository --> GSMGreenSpacesList** : create()

                        loop for each known Green Space
                            GreenSpaceRepository -> greenSpacesList : greenSpace = get(i)
                            activate greenSpacesList
                            deactivate greenSpacesList

                            GreenSpaceRepository -> greenSpace : GSM = hasUserEmail(email)
                            activate greenSpace
                            deactivate greenSpace

                            opt hasUserEmail
                                GreenSpaceRepository -> GSMGreenSpacesList : add(greenSpace)
                                activate GSMGreenSpacesList
                                deactivate GSMGreenSpacesList
                            end opt

                        end loop

                    GreenSpaceRepository -> GreenSpaceMapper : toDTO(GSMGreenSpacesList)
                    activate GreenSpaceMapper

                        GreenSpaceMapper --> GSMGreenSpacesListDto** : create()

                        loop for each object in GSMGreenSpacesList
                            GreenSpaceMapper -> GSMGreenSpacesList : obj = get(i)
                            activate GSMGreenSpacesList

                                deactivate GSMGreenSpacesList

                            GreenSpaceMapper -> GreenSpaceMapper : objDto = toDTO(obj)
                            activate GreenSpaceMapper

                                GreenSpaceMapper -> greenSpaceDTO** :create(...)
                                deactivate GreenSpaceMapper

                            GreenSpaceMapper -> GSMGreenSpacesListDto : add(objDto)
                            activate GSMGreenSpacesListDto

                                deactivate GSMGreenSpacesListDto

                            end loop

                        GreenSpaceMapper --> GreenSpaceRepository : GSMGreenSpacesListDto
                        deactivate GreenSpaceMapper

                    GreenSpaceRepository --> CTRL : GSMGreenSpacesListDto
                    deactivate GreenSpaceRepository

                    CTRL --> UI : GSMGreenSpacesListDto
                    deactivate CTRL

    UI --> Employee : shows list of green spaces to select one
    deactivate UI

    Employee -> UI : selects one green space
    activate UI

    UI -> CTRL : getTasksByGreenSpace(greenSpace)
    activate CTRL

            CTRL -> PLAT : getAgenda()
            activate PLAT

            PLAT --> CTRL : agenda
            deactivate PLAT

            CTRL -> Agenda : getAgendaTasks(greenSpace)
            activate Agenda

            Agenda --> tasksListByGreenSpace** : create()

            loop for each known task

            Agenda -> entriesList : task = get(i)
            activate entriesList
            deactivate entriesList

            Agenda -> task : taskGreenSpace = greenSpace
            activate task
            deactivate task

            opt greenSpace == true
            Agenda -> tasksListByGreenSpace : add(entry)
            activate tasksListByGreenSpace
            deactivate tasksListByGreenSpace
            end opt

            end loop

            Agenda -> TaskMapper : toDTO(entriesList)
            activate TaskMapper

            TaskMapper --> tasksListByGreenSpaceDTO** : create()

            loop for each task in tasksListByGreenSpace

            TaskMapper -> tasksListByGreenSpace : obj = get(i)
            activate tasksListByGreenSpace
            deactivate tasksListByGreenSpace

            TaskMapper -> TaskMapper : objDto = toDTO(obj)
            activate TaskMapper

            TaskMapper -> TaskDTO** : create(...)
            deactivate TaskMapper

            TaskMapper -> tasksListByGreenSpaceDTO : add(objDto)
            activate tasksListByGreenSpaceDTO
            deactivate tasksListByGreenSpaceDTO

            end loop

            TaskMapper --> Agenda : tasksListByGreenSpaceDTO
            deactivate TaskMapper

            Agenda --> CTRL : tasksListByGreenSpaceDTO
            deactivate Agenda

            CTRL --> UI : tasksListByGreenSpaceDTO
            deactivate CTRL

    UI --> Employee : shows list of entries in the agenda of the selected green space
    deactivate UI

    Employee -> UI : selects one entry
    activate UI

    UI --> Employee : requests the new date
    deactivate UI

    Employee -> UI : types the new date
    activate UI

    UI -> CTRL : postponeEntry(taskDTO, newDate)
    activate CTRL

    CTRL --> CTRL : validateNewDate(newDate)
    CTRL -> Agenda : postponeEntry(taskDTO, newDate)
    activate Agenda

    Agenda -> TaskDTO : postponeEntry(taskDTO, newDate)
    activate TaskDTO

    TaskDTO --> Agenda : taskDTO
    deactivate TaskDTO

    Agenda --> CTRL : taskDTO
    deactivate Agenda

    CTRL --> UI : taskDTO
    deactivate CTRL

    UI --> Employee : displays operation success
    deactivate UI

deactivate Employee

@enduml