@startuml
skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false

title US028 - Consult the tasks assigned to a collaborator

autonumber

actor "Collaborator" as Employee
participant ":ConsultTasksUI" as UI
participant ":ConsultTasksController" as CTRL
participant ":ApplicationSession" as _APP
participant "appSession\n:ApplicationSession" as APP
participant "currentSession\n:UserSession" as SESSION
participant ":Repositories" as RepositorySingleton
participant "repositories\n:Repositories" as PLAT
participant "teamRepository\n:TeamRepository" as TeamRepository
participant "team\n:Team" as Team
participant "teamsList\n:List<Team>" as TeamsList
participant "teamMapper\n:TeamMapper" as TeamMapper
participant "teamsList\n:List<TeamDTO>" as TeamsListDTO
participant "teamDTO\n:TeamDTO" as TeamDTO
participant "agenda\n:Agenda" as Agenda
participant "task\n:GSTask" as Task
participant "tasksList\n:List<GSTask>" as TasksList
participant "taskMapper\n:GSTaskMapper" as TaskMapper
participant "tasksList\n:List<GSTaskDTO>" as TasksListDTO
participant "taskDTO\n:GSTaskDTO" as TaskDTO

activate Employee

    Employee -> UI : asks to consult the tasks assigned to collaborator
    activate UI

    UI -> CTRL** : create

    UI --> Employee : requests first date
    deactivate UI

    Employee -> UI : types first date
    activate UI

    UI --> Employee : requests second date
    deactivate UI

    Employee -> UI : types second date
    activate UI

    UI -> CTRL : getEmailCollaborator()
    activate CTRL

    CTRL -> _APP : getInstance()
    activate _APP

    _APP --> CTRL : appSession
    deactivate _APP

    CTRL -> APP : getCurrentSession()
    activate APP

    APP --> CTRL : currentSession
    deactivate APP

    CTRL -> SESSION : email = getUser(email)
    activate SESSION

    SESSION --> CTRL : email
    deactivate SESSION

    CTRL --> UI : email
    deactivate CTRL

    UI -> CTRL : getTeamsByCollaborator(email)
    activate CTRL

        CTRL -> RepositorySingleton : getInstance()
        activate RepositorySingleton

        RepositorySingleton --> CTRL: repositories
        deactivate RepositorySingleton

        CTRL -> PLAT : getTaskRepository()
        activate PLAT

        PLAT --> CTRL: taskRepository
        deactivate PLAT

        CTRL -> TeamRepository : getTeamsByCollaborator(email)
            activate TeamRepository

            TeamRepository -> TeamsList ** : create()
            loop for each task
            TeamRepository -> Team : hasCollaboratorEmail(email)
            activate Team

            Team --> TeamRepository : true/false
            deactivate Team

            opt hasCollaboratorEmail == true
                TeamRepository -> TeamsList : add(team)
                activate TeamsList
                deactivate TeamsList
            end opt

            end loop
        TeamRepository -> TeamMapper : toDTO(teams)
            activate TeamMapper

            TeamMapper -> TeamsListDTO ** : create()
            loop for each team in TeamList
            TeamMapper -> TeamsList : obj = get(i)
            activate TeamsList
            deactivate TeamsList

            TeamMapper -> TeamMapper : objDTO = toDTO(obj)
            activate TeamMapper

            TeamMapper -> TeamDTO ** : create(...)
            deactivate TeamMapper

            TeamMapper -> TeamsListDTO : add(objDTO)
            activate TeamsListDTO
            deactivate TeamsListDTO

            end loop

            TeamMapper --> TeamRepository : teamsDTO
            deactivate TeamMapper

            TeamRepository --> CTRL : teamsDTO
            deactivate TeamRepository

        CTRL --> UI : teamsDTO
        deactivate CTRL

        UI -> CTRL : getTasks(teamsDTO, startDate, endDate)
            activate CTRL

        CTRL -> Agenda : getTasks(teamsDTO, startDate, endDate)
            activate Agenda

            Agenda -> TasksList ** : create()
            loop for each task
                opt assignedTeam exists in teamsDTO
                    Agenda -> Task : betweenDates(startDate, endDate)
                    activate Task

                    Task --> Agenda : true/false
                    deactivate Task

                    opt betweenDates == true
                        Agenda -> TasksList : add(task)
                        activate TasksList
                        deactivate TasksList
                    end opt

                end opt

            end loop

        Agenda -> TaskMapper : toDTO(tasks)
        activate TaskMapper

        TaskMapper -> TasksListDTO ** : create()
        loop for each task in TaskList
        TaskMapper -> TasksList : obj = get(i)
        activate TasksList
        deactivate TasksList

        TaskMapper -> TaskMapper : objDTO = toDTO(obj)
        activate TaskMapper

        TaskMapper -> TaskDTO ** : create(...)
        deactivate TaskMapper

        TaskMapper -> TasksListDTO : add(objDTO)
        activate TasksListDTO
        deactivate TasksListDTO

        end loop

        TaskMapper --> Agenda : tasksDTO
        deactivate TaskMapper

        Agenda --> CTRL : tasksDTO
        deactivate Agenda

    CTRL --> UI : tasksDTO
    deactivate CTRL

    UI --> Employee : asks if collaborator wants to view tasks filtered by status
    deactivate UI

    Employee -> UI : answers yes or no
    activate UI

    opt answer is yes
        UI -> CTRL : getStatusList()
        activate CTRL

        CTRL -> Agenda : getStatusList()
        activate Agenda

        Agenda --> CTRL : statusList
        deactivate Agenda

        CTRL --> UI : statusList
        deactivate CTRL

        UI --> Employee : shows status list and requests one to filter tasks
        deactivate UI

        Employee -> UI : selects one status
        activate UI

        UI -> CTRL : consultTasksByStatus(tasksDTO, status)
        activate CTRL

        CTRL --> CTRL : filterTasks(tasksDTO, status)
        CTRL --> CTRL : orderTasksByDate(tasksDTO)

        CTRL --> UI : tasksDTO
        deactivate CTRL
    end opt

    opt answer is no
        UI -> CTRL : consultTasks(tasksDTO)
        activate CTRL

        CTRL --> CTRL : orderTasksByDate(tasksDTO)

        CTRL --> UI : tasksDTO
        deactivate CTRL
    end opt

    UI --> Employee : shows tasks assigned to collaborator \nbetween two dates requested
    deactivate UI

deactivate Employee
@enduml